name: CI

on:
  push:
    branches: [ main, refactor/high-perf-copy ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: PowerShell/PowerShell@v1
        
      - name: Install required modules
        shell: pwsh
        run: |
          Install-Module Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Install-Module PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          
      - name: Create test CSV file
        shell: pwsh
        run: |
          @'
          "Supplier Item #","Description"
          "SKU001","Test Item 1"
          "SKU002","Test Item 2"
          "SKU003","Test Item 3"
          '@ | Out-File -FilePath ./test-skus.csv -Encoding UTF8
          
      - name: Lint with PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./S3SkuCopy/S3SkuCopy.psm1 -Severity Warning
          if ($results) {
            $results | Format-Table -AutoSize
            Write-Warning "PSScriptAnalyzer found $($results.Count) issues"
          } else {
            Write-Host "✓ No PSScriptAnalyzer issues found" -ForegroundColor Green
          }
          
      - name: Run Tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = './S3SkuCopy/Copy-SkuFolders.Tests.ps1'
          $config.Output.Verbosity = 'Detailed'
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.Path = './S3SkuCopy/S3SkuCopy.psm1'
          $config.CodeCoverage.OutputFormat = 'JaCoCo'
          $config.CodeCoverage.OutputPath = './coverage.xml'
          
          $result = Invoke-Pester -Configuration $config
          
          if ($result.FailedCount -gt 0) {
            Write-Error "$($result.FailedCount) test(s) failed"
            exit 1
          }
          
          Write-Host "✓ All tests passed" -ForegroundColor Green
          
      - name: Validate module functionality (dry run)
        shell: pwsh
        run: |
          try {
            Import-Module ./S3SkuCopy/S3SkuCopy.psd1 -Force
            
            # Test with dry run
            $result = Copy-SkuFolders -Csv ./test-skus.csv -Bucket 's3://test-bucket/' -Dest ./test-output -DryRun
            Write-Host "✓ Dry run completed successfully" -ForegroundColor Green
            
          } catch {
            Write-Error "Module validation failed: $($_.Exception.Message)"
            exit 1
          }
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            ./coverage.xml
            ./TestResults.xml
            
      - name: Release preparation
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          Write-Host "✓ Ready for release" -ForegroundColor Green
          Write-Host "Version: $(Get-Content ./S3SkuCopy/S3SkuCopy.psd1 | Select-String 'ModuleVersion')" -ForegroundColor Cyan